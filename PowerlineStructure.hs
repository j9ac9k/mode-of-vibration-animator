module PowerlineStructure where

list_nodes :: [(Int, (Double, Double))]
list_nodes = [
    (1, (-4.6, 0)),
    (2, (0, 2)),
    (3, (4.6, 0)),
    (4, (-4, 2)),
    (5, (4, 2)),
    (6, (0, 5)),
    (7, (-3, 7)),
    (8, (3, 7)),
    (9, (0, 10)),
    (10, (-2, 12)),
    (11, (2, 12)),
    (12, (0, 15)),
    (13, (-4, 17)),
    (14, (-1, 17)),
    (15, (1, 17)),
    (16, (4, 17)),
    (17, (-5.2, 20)),
    (18, (0, 22)),
    (19, (5.2, 20)),
    (20, (-6.4, 17)),
    (21, (-13, 17)),
    (22, (6.4, 17)),
    (23, (13, 17))]


list_node_fixtures :: [(Int, (Bool, Bool))]
list_node_fixtures = [(1, (True, True)),
                     (3, (True, True))]


list_edges :: [(Int, (Int, Int))]
list_edges = [(1, (1, 4)),
             (2, (1, 2)),
             (3, (2, 3)),
             (4, (3, 5)),
             (5, (4, 2)),
             (6, (2, 5)),
             (7, (4, 7)),
             (8, (4, 6)),
             (9, (5 ,6)),
             (10, (5, 8)),
             (11, (6, 7)),
             (12, (6, 8)),
             (13, (7, 8)),
             (14, (7, 10)),
             (15, (7, 9)),
             (16, (8, 9)),
             (17, (8, 11)),
             (18, (9, 10)),
             (19, (9, 11)),
             (20, (10, 11)),
             (21, (10, 13)),
             (22, (10, 14)),
             (23, (10, 12)),
             (24, (11, 12)),
             (25, (11, 15)),
             (26, (11, 16)),
             (27, (12, 14)),
             (28, (12, 15)),
             (29, (13, 14)),
             (30, (14, 15)),
             (31, (15, 16)),
             (32, (13, 17)),
             (33, (17, 18)),
             (34, (14, 18)),
             (35, (15, 18)),
             (36, (16, 19)),
             (37, (18, 19)),
             (38, (17, 20)),
             (39, (13, 20)),
             (40, (20, 21)),
             (41, (21, 17)),
             (42, (16, 22)),
             (43, (19, 22)),
             (44, (22, 23)),
             (45, (19, 23))]



elastic_mod = 400000000.0 :: Double
rho = 7850.0 :: Double
cross_sec_area = 0.0004361282 :: Double